// Script de teste para verificar o sistema de gerenciamento de usu√°rios
// Execute este script no console do navegador ap√≥s fazer login como admin

console.log('üîç Testando sistema de gerenciamento de usu√°rios...');

// Fun√ß√£o para testar se o usu√°rio atual √© admin
function testIsAdmin() {
  const user = JSON.parse(localStorage.getItem('app_user') || '{}');
  console.log('üë§ Usu√°rio atual:', user);
  console.log('üîë √â admin?', user.role === 'admin');
  return user.role === 'admin';
}

// Fun√ß√£o para testar a chamada da API
async function testGetAllUsers() {
  try {
    console.log('üì° Testando getAllUsers...');
    
    // Simular chamada da fun√ß√£o getAllUsers
    const response = await fetch('/api/test-get-all-users', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        user: JSON.parse(localStorage.getItem('app_user') || '{}')
      })
    });
    
    const data = await response.json();
    console.log('üìä Resposta:', data);
    
    return data;
  } catch (error) {
    console.error('‚ùå Erro ao testar getAllUsers:', error);
    return null;
  }
}

// Fun√ß√£o para verificar se as fun√ß√µes SQL existem
function checkSQLFunctions() {
  console.log('üîß Verificando fun√ß√µes SQL...');
  console.log('‚ÑπÔ∏è  Para verificar se as fun√ß√µes SQL foram criadas:');
  console.log('1. Acesse o Supabase Dashboard');
  console.log('2. V√° para Database > Functions');
  console.log('3. Procure por: get_all_users, get_user_by_id, update_user_by_admin');
}

// Fun√ß√£o para verificar usu√°rios no banco
function checkUsersInDatabase() {
  console.log('üë• Para verificar usu√°rios no banco, execute no SQL Editor:');
  console.log(`
SELECT 
  user_id,
  email,
  full_name,
  role,
  is_active,
  created_at
FROM profiles 
WHERE is_active = true
ORDER BY created_at DESC;
  `);
}

// Executar testes
function runTests() {
  console.log('üöÄ Iniciando testes...\n');
  
  // Teste 1: Verificar se √© admin
  const isAdmin = testIsAdmin();
  
  if (!isAdmin) {
    console.log('‚ùå Usu√°rio n√£o √© admin. Fa√ßa login como administrador.');
    return;
  }
  
  console.log('‚úÖ Usu√°rio √© admin!\n');
  
  // Teste 2: Verificar fun√ß√µes SQL
  checkSQLFunctions();
  console.log('');
  
  // Teste 3: Verificar usu√°rios no banco
  checkUsersInDatabase();
  console.log('');
  
  // Teste 4: Verificar se a p√°gina est√° acess√≠vel
  console.log('üåê Para testar a p√°gina de gerenciamento:');
  console.log('1. Acesse: http://localhost:8080/users');
  console.log('2. Verifique se a lista de usu√°rios aparece');
  console.log('3. Teste editar um usu√°rio n√£o-admin');
  
  console.log('\nüìã Checklist:');
  console.log('‚ñ° Fun√ß√µes SQL aplicadas no Supabase');
  console.log('‚ñ° Usu√°rio logado √© admin');
  console.log('‚ñ° Existem usu√°rios na tabela profiles');
  console.log('‚ñ° P√°gina /users carrega corretamente');
  console.log('‚ñ° Lista de usu√°rios √© exibida');
  console.log('‚ñ° Bot√£o "Editar" funciona para usu√°rios n√£o-admin');
}

// Executar testes automaticamente
runTests();

// Exportar fun√ß√µes para uso manual
window.testUserManagement = {
  testIsAdmin,
  testGetAllUsers,
  checkSQLFunctions,
  checkUsersInDatabase,
  runTests
};

console.log('\nüí° Para executar testes manualmente, use:');
console.log('window.testUserManagement.runTests()');
